---
title: "Hands-on Exercise 1"
author: "Chow Hui Ling"
date: "`r Sys.Date()`"
source: 
date-format: "DD MMM YYYY"
---

Note: Contents of this page are referenced from: [instructor's materials](https://r4va.netlify.app/chap01#essential-grammatical-elements-in-ggplot2-aesthetic-mappings)


# Getting Started

## Install and launching R packages

The code chunk below uses p_load function of pacman package to check if tidyverse packages have been installed in the computer. If they are, then they will be launched into R environment.

```{r}
pacman::p_load(tidyverse)

```

## Importing the data

The code below imports *Exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function in the [**readr**](https://readr.tidyverse.org/) tidyverse package.

```{r}
#| eval: true
exam_data <- read_csv("data/Exam_data.csv")
```

-   Data contains year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. `chr` stands for categorical data (four of them, namely, ID, CLASS, GENDER and RACE). `dbl` refers to continuous attributes: ENGLISH, MATHS and SCIENCE.

------------------------------------------------------------------------

# Plotting a simple bar chart

::: panel-tabset
### Description

[ggplot2](https://ggplot2.tidyverse.org/) is an R package for declaratively creating data-driven graphics based on ***The Grammar of Graphics***

It is also part of the tidiverse family specially designed for visual exploration and communication.

Let us first compare how R Graphics, the core graphical functions of base R, and ggplot can be used to plot a simple histogram.

### R Graphics VS ggplot

::: columns
::: {.column width="50%"}
#### R Graphics

```{r}
#| fig-height: 6
hist(exam_data$MATHS)
```
:::

::: {.column width="50%"}
#### ggplot2

```{r}
#| fig-height: 6
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

Although ggplot2 requires a longer code chunk, [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157) suggests it is easier to customize the plot according to the visualization needs compared to R Graphics.
:::
:::

------------------------------------------------------------------------


# Grammar of Graphics

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) **Grammar of Graphics**, Springer. The grammar of graphics is an answer to a question:

What is a statistical graphic?

In the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

There are **two principles in Grammar of Graphics**, they are:

-   Graphics = distinct layers of grammatical elements

-   Meaningful plots through aesthetic mapping

A good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.

## A Layered Grammar of Graphics

A short description of each building block are as follows:

-   **Data**: The dataset being plotted.

-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   **Geometrics**: The visual elements used for our data, such as point, bar or line.

-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   **Coordinate systems** define the plane on which data are mapped on the graphic.

-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

------------------------------------------------------------------------

# Essential Grammatical elements in ggplot2:

::: panel-tabset 
## Data

```{r}
ggplot(data=exam_data)
```

::: callout-note
-   A blank canvas appears.
-   `ggplot()` initializes a ggplot object.
-   The *data* argument defines the dataset to be used for plotting.
-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`.
:::

## Aesthetic mappings

[Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) allow the use of visual characteristics to encode an aspect of the data so as to convey information.

All aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)

Code chunk below adds aesthetic element into the plot to include the x-axis and the axis's label.

```{r}
ggplot(data=exam_data,
       aes(x= MATHS))
```

## Geom

::: panel-tabset 
### Description

Geometric objects are the actual marks we put on a plot. Examples include:

-   *geom_point* for drawing individual points (e.g., a scatter plot)

-   *geom_line* for drawing lines (e.g., for a line charts)

-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)

-   *geom_bar, geom_col* for drawing bars (e.g., for bar charts)

-   *geom_histogram* for drawing binned values (e.g. a histogram)

-   *geom_polygon* for drawing arbitrary shapes

-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

-   geom_boxplot: for drawing boxplots

-   geom_density: for distribution frequency

-   ... (For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms))

A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.

### geom_bar

The code chunk below plots a bar chart using [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}
ggplot(data=exam_data, aes (x=RACE)) + geom_bar() + geom_dotplot(dotsize = 0.5)
```

### geom_dotplot

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

::: callout-warn
The y-scale is not very useful, in fact it is rather misleading.
:::

::: callout-note
The code below is used to perform two steps: - `scale_y_continuous()` is used to turn off the y-axis, and `binwidth` *argument* is used to change the binwidth to 2.5.
:::

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)
```

### geom_histogram

In the code chunk below, [`*geom_histogram()*`](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.

Note that the default bin is **30**.

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) + geom_histogram()
```
:::

## Modifying geometric objects

::: panel-tabset
### by changing geom()

In the code chunk below,

*`bins`* argument is used to change the number of bins to 20, *`fill`* argument is used to shade the histogram with light blue color, and *`color`* argument is used to change the outline colour of the bars in black

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue")
```
:::
:::
# Using Quarto to show/hide code and output


```
#| eval: true
#| echo: false
sample = 123
```

